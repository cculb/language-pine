name: "Pine"
scopeName: "source.pine"
fileTypes: [
  "pine"
]
firstLineMatch: '^#!\\s*\\/.*\\snit'
patterns: [
  {
    include: "#strings"
  }
  {
    include: "#comments"
  }
  {
    include: "#keyword"
  }
  {
    include: "#constant"
  }
  {
    include: "#variable"
  }
]
repository:
  "comments":
    begin: "(^[ \\t]+)?(?=#)"
    beginCaptures:
      1:
        name: "punctuation.whitespace.comment.leading.pine"
    end: "(?!\\G)"
    patterns: [
      {
        begin: "#"
        beginCaptures:
          0:
            name: "punctuation.defipineion.comment.pine"
        end: "\\n"
        name: "comment.line.number-sign.pine"
      }
    ]
  "strings":
    patterns: [
      {
        name: "string.quoted.double.pine"
        begin: "\\\""
        end: "\\\""
        patterns: [
          {
            include: "#short-interpolation"
          }
          {
            name: "string.char.pine"
            match: "([^\\\\]|\\\\.)"
          }
        ]
      }
    ]
  "variable":
    patterns: [
      {
        name: "variable.other.pine"
        match: "[a-z][a-zA-Z0-9_]*"
      }
    ]
  "constant":
    patterns: [
      {
        name: "constant.numeric.pine"
        match: "\\b([0-9]*(\\.|0x|0b)?[0-9]+)\\b"
      }
      {
        name: "constant.language.pine"
        match: "\\b(true|false|null)\\b"
      }
    ]
  "keyword":
    patterns: [
      {
        name: "keyword.control.pine"
        match: "\\b(var|let|where|ref|def|func|class|inherits|if|else|for|while|do|pass|switch|case|default|continue|return|break|new|import|try|catch|finally|throw)\\b"
      }
      {
        name: "keyword.operator.boolean.pine"
        match: "\\b(is\\ not|is|not\\ in|in|and|not|or)\\b"
      }
      {
        name: "keyword.operator.pine"
        match: "(?x)(\\+=|-=|\\*=|/=|%=|!=|=|<=|<<|<|>=|>>|>|<<=|>>=|\\(|\\)|\\{|\\}|\\[|\\]|,|:|\\.\\.\\.|\\.|\\?|\\+|-|\\*|/|%|~|&|^|\\||&=|^=|\\|=)"
      }
    ]
