name: "Pine"
scopeName: "source.pine"
fileTypes: ["pine"]
firstLineMatch: "^#!\\s*\\/.*\\spine"
patterns: [
    {
        name: "meta.function.pine"
        begin: "^\\s*(func|def)\\s+(?=[A-Za-z_][A-Za-z0-9_]*)"
        beginCaptures:
            1:
                name: "storage.type.function.pine"
        end: "\\s*(?:(\\:))"
        endCaptures:
            1:
                name: "keyword.operator.pine"
        patterns: [
            {
                begin: "(?=[A-Za-z_][A-Za-z0-9_]*)"
                contentName: "entity.name.function.pine"
                end: "(?![A-Za-z_][A-Za-z0-9_]*)"
            }
            {
                begin: "\\s*(where)\\s*"
                beginCaptures:
                    1:
                        name: "keyword.control.pine"
                end: "(?=\\:)"
                patterns: [
                    {
                        begin: "(?=[A-Za-z_][A-Za-z0-9_]*)"
                        contentName: "variable.parameter.pine"
                        end: "(?![A-Za-z_][A-Za-z0-9_]*)"
                    }
                    {
                        match: ","
                        name: "punctuation.definition.separator.pine"
                    }
                ]
            }
            {
                begin: "\\s*(\\()"
                beginCaptures:
                    1:
                        name: "punctuation.definition.parameters.begin.pine"
                end: "(\\))"
                endCaptures:
                    1:
                        name: "punctuation.definition.parameters.end.pine"
                patterns: [
                    {
                        begin: "(?=[A-Za-z_][A-Za-z0-9_]*)"
                        contentName: "variable.parameter.pine"
                        end: "(?![A-Za-z_][A-Za-z0-9_]*)"
                    }
                    {
                        match: ","
                        name: "punctuation.definition.separator.pine"
                    }
                ]
            }
        ]
    }
    {
        include: "#keyword"
    }
    {
        include: "#constant"
    }
    {
        include: "#strings"
    }
    {
        include: "#variable"
    }
    {
        include: "#comments"
    }
]
repository:
    "keyword":
        patterns: [
            {
                name: "keyword.control.pine"
                match: "\\b(where|inherits|if|else|for|while|do|switch|case|default|new|import|try|catch|finally|throw)\\b"
            }
            {
                name: "keyword.breaks.pine"
                match: "\\b(return|continue|break|pass)\\b"
            }
            {
                name: "keyword.declaration.pine"
                match: "\\b(var|let|ref|func|class|def)\\b"
            }
            {
                name: "keyword.operator.pine"
                match: "(?x)(\\+=|-=|\\*=|/=|%=|!=|=|<=|<<|<|>=|>>|>|<<=|>>=|,|\\:|\\(|\\)|\\{|\\}|\\[|\\]|\\.\\.\\.|\\.|\\?|\\+|-|\\*|/|%|~|&|\\^|\\||&=|^=|\\|=)"
            }
            {
                name: "keyword.operator.boolean.pine"
                match: "\\b(is\\ not|is|not\\ in|in|and|not|or)\\b"
            }
        ]
    "constant":
        patterns: [
            {
                name: "constant.numeric.pine"
                match: "\\b([0-9]*(\\.|0x|0b)?[0-9]+)\\b"
            }
            {
                name: "constant.language.pine"
                match: "\\b(true|false|null)\\b"
            }
        ]
    "strings":
        patterns: [
            {
                name: "string.quoted.double.pine"
                begin: "\\\""
                end: "\\\""
                patterns: [
                    {
                        name: "string.char.pine"
                        match: "([^\\\\]|\\\\.)"
                    }
                ]
            }
        ]
    "variable":
        patterns: [
            {
                name: "variable.pine"
                match: "[A-Za-z_][a-zA-Z0-9_]*"
            }
        ]
    "comments":
        begin: "(^[ \\t]+)?(?=#)"
        beginCaptures:
            1:
                name: "punctuation.whitespace.comment.leading.pine"
        end: "(?!\\G)"
        patterns: [
            {
                begin: "#"
                beginCaptures:
                    0:
                        name: "punctuation.definition.comment.pine"
                end: "\\n"
                name: "comment.line.number-sign.pine"
            }
        ]
