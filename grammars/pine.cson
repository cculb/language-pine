name: "Pine"
scopeName: "source.pine"
fileTypes: [
  "pine"
]
firstLineMatch: '^#!\\s*\\/.*\\spine'
patterns: [
  {
    include: "#strings"
  }
  {
    include: "#comments"
  }
  {
    include: "#keyword"
  }
  {
    include: "#constant"
  }
  {
    include: "#variable"
  }
]
repository:
  "comments":
    begin: "(^[ \\t]+)?(?=#)"
    beginCaptures:
      1:
        name: "punctuation.whitespace.comment.leading.pine"
    end: "(?!\\G)"
    patterns: [
      {
        begin: "#"
        beginCaptures:
          0:
            name: "punctuation.defipineion.comment.pine"
        end: "\\n"
        name: "comment.line.number-sign.pine"
      }
    ]
  "strings":
    patterns: [
      {
        name: "string.quoted.double.pine"
        begin: "\\\""
        end: "\\\""
        patterns: [
          {
            name: "string.char.pine"
            match: "([^\\\\]|\\\\.)"
          }
        ]
      }
    ]
  "variable":
    patterns: [
      {
        name: "variable.other.pine"
        match: "[a-z][a-zA-Z0-9_]*"
      }
    ]
  "constant":
    patterns: [
      {
        name: "constant.numeric.float_exp.pine"
        match: "-?(([0-9]*.[0-9])|([0-9]+))+e-?[0-9]+"
      }
      {
        name: "constant.numeric.float.pine"
        match: "-?[0-9]*\\.[0-9]+"
      }
      {
        name: "constant.numeric.hex.pine"
        match: "-?0(x|X)[0-9A-Fa-f_]+((u|i)(8|(16)|(32)))?"
      }
      {
        name: "constant.numeric.oct.pine"
        match: "-?0(o|O)[0-7_]+((u|i)(8|(16)|(32)))?"
      }
      {
        name: "constant.numeric.bin.pine"
        match: "-?0(b|B)[0-1_]+((u|i)(8|(16)|(32)))?"
      }
      {
        name: "constant.numeric.dec.pine"
        match: "-?[0-9][0-9_]*((u|i)(8|(16)|(32)))?"
      }
      {
        name: "constant.language.pine"
        match: "\\b(true|false|null)\\b"
      }
    ]
  "keyword":
    patterns: [
      {
        name: "keyword.control.pine"
        match: "\\b(label|if|then|loop|else|while|for|do|end|in|with)\\b"
      }
      {
        name: "keyword.breaks.pine"
        match: "\\b(return|continue|break|abort)\\b"
      }
      {
        name: "keyword.declaration.pine"
        match: "\\b(nullable|once|new|var)\\b"
      }
      {
        name: "keyword.annot.pine"
        match: "\\b(is)\\b"
      }
      {
        name: "keyword.types.pine"
        match: "\\b(isa|as|type|isset)\\b"
      }
      {
        name: "keyword.other.special-method.misc.pine"
        match: "\\b(assert|__debug__|super|implies|redef)\\b"
      }
      {
        name: "keyword.operator.pine"
        match: "(?x)(
          ==|\\+=|-=|!=|=|!|@|<=>|<=|<<|<|>=|>>|>|
          \\(|\\)|\\[\\]|\\[|\\]|,|::|:|\\.\\.\\.|\\.\\.|
          \\.|\\+|-|\\*\\*|\\*|/|%
        )"
      }
      {
        name: "keyword.operator.boolean.pine"
        match: "\\b(and|not|or)\\b"
      }
    ]
