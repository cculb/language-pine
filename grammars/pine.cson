name: "Pine"
scopeName: "source.pine"
fileTypes: ["pine"]
firstLineMatch: "^#!\\s*\\/.*\\spine"
patterns: [
    {
        include: "#keyword"
    }
    {
        include: "#constant"
    }
    {
        include: "#strings"
    }
    {
        include: "#variable"
    }
    {
        include: "#comments"
    }
]
repository:
    "keyword":
        patterns: [
            {
                begin: "^\\s*(class)\\s+(?=[a-zA-Z_][a-zA-Z_0-9]*\\s*\\()"
                beginCaptures:
                    1:
                        name: "storage.type.class.python"
                end: "(\\))\\s*(?:(\\:)|(.*$\\n?))"
                endCaptures:
                    1:
                        name: "punctuation.definition.inheritance.end.python"
                    2:
                        name: "punctuation.section.class.begin.python"
                    3:
                        name: "invalid.illegal.missing-section-begin.python"
                name: "meta.class.python"
                patterns: [
                    {
                        begin: "(?=[A-Za-z_][A-Za-z0-9_]*)"
                        contentName: "entity.name.type.class.python"
                        end: "(?![A-Za-z0-9_])"
                        patterns: [
                        {
                            include: "#entity_name_class"
                        }
                        ]
                      }
                  {
                      begin: "(\\()"
                      beginCaptures:
                          1:
                              name: "punctuation.definition.inheritance.begin.python"
                      contentName: "meta.class.inheritance.python"
                      end: "(?=\\)|:)"
                      patterns: [
                      {
                          begin: "(?<=\\(|,)\\s*"
                          contentName: "entity.other.inherited-class.python"
                          end: "\\s*(?:(,)|(?=\\)))"
                          endCaptures:
                              1:
                                  name: "punctuation.separator.inheritance.python"
                        ]
                      }
                    ]
                  }
                ]
            }
            {
                name: "keyword.control.pine"
                match: "\\b(where|inherits|if|else|for|while|do|switch|case|default|new|import|try|catch|finally|throw)\\b"
            }
            {
                name: "keyword.breaks.pine"
                match: "\\b(return|continue|break|pass)\\b"
            }
            {
                name: "keyword.declaration.pine"
                match: "\\b(var|let|ref|func|class|def)\\b"
            }
            {
                name: "keyword.operator.pine"
                match: "(?x)(\\+=|-=|\\*=|/=|%=|!=|=|<=|<<|<|>=|>>|>|<<=|>>=|,|:|\\.\\.\\.|\\.|\\?|\\+|-|\\*|/|%|~|&|\\^|\\||&=|^=|\\|=)"
            }
            {
                name: "keyword.operator.boolean.pine"
                match: "\\b(is\\ not|is|not\\ in|in|and|not|or)\\b"
            }
        ]
    "constant":
        patterns: [
            {
                name: "constant.numeric.pine"
                match: "\\b([0-9]*(\\.|0x|0b)?[0-9]+)\\b"
            }
            {
                name: "constant.language.pine"
                match: "\\b(true|false|null)\\b"
            }
        ]
    "strings":
        patterns: [
            {
                name: "string.quoted.double.pine"
                begin: "\\\""
                end: "\\\""
                patterns: [
                    {
                        name: "string.char.pine"
                        match: "([^\\\\]|\\\\.)"
                    }
                ]
            }
        ]
    "variable":
        patterns: [
            {
                name: "variable.other.pine"
                match: "[A-Za-z_][a-zA-Z0-9_]*"
            }
        ]
    "comments":
        begin: "(^[ \\t]+)?(?=#)"
        beginCaptures:
            1:
                name: "punctuation.whitespace.comment.leading.pine"
        end: "(?!\\G)"
        patterns: [
            {
                begin: "#"
                beginCaptures:
                    0:
                        name: "punctuation.definition.comment.pine"
                end: "\\n"
                name: "comment.line.number-sign.pine"
            }
        ]
