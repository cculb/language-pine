name: "Pine"
scopeName: "source.pine"
fileTypes: ["pine"]
firstLineMatch: "^#!\\s*\\/.*\\spine"
patterns: [
    {
        include: "#comment"
    }
    {
        include: "#builtin"
    }
    {
        include: "#keyword"
    }
    {
        include: "#operator"
    }
    {
        include: "#constant"
    }
    {
        include: "#string"
    }
    {
        include: "#variable"
    }
]
repository:
    "comment":
        patterns: [
            {
                name: "comment.pine"
                begin: "(#)"
                end: "(\\n)"
            }
        ]
    "builtin":
        patterns: [
            {
                name: "support.type.data.pine"
                match: "(?x)\\b(Null|Boolean|Numeric)\\b"
            }
            {
                name: "support.type.class.pine"
                match: "(?x)\\b(Range|Matrix|String|Array|Set)"
            }
        ]
    "keyword":
        patterns: [
            {
                name: "keyword.control.declaration.pine"
                match: "\\b(var|let|ref|func|class|def|new|import|where|inherits)\\b"
            }
            {
                name: "keyword.control.loop.pine"
                match: "\\b(for|while)\\b"
            }
            {
                name: "keyword.control.conditional.pine"
                match: "\\b(if|else\ if|else|switch|case|default)\\b"
            }
            {
                name: "keyword.control.flow.pine"
                match: "\\b(return|continue|break|pass)\\b"
            }
            {
                name: "keyword.control.handler.pine"
                match: "\\b(try|catch|finally|throw)\\b"
            }
            {
                name: "keyword.operator.logical.pine"
                match: "\\b(is\\ not|is|not\\ in|in|and|not|or)\\b"
            }
        ]
    "operator":
        patterns: [
            {
                name: "keyword.operator.arithmetic.pine"
                match: "(?x)(\\+=|-=|\\*=|/=|%=|\\+|-|\\*|/|%)"
            }
            {
                name: "keyword.operator.bitwise.pine"
                match: "(?x)(<<|>>|<<=|>>=|~|&|\\^|\\||&=|^=|\\|=)"
            }
            {
                name: "keyword.operator.equality.pine"
                match: "(?x)(!=|=|<=|>=|<|>)"
            }
            {
                name: "keyword.operator.dynamic.pine"
                match: "(?x)(,|\\(|\\)|\\{|\\}|\\[|\\])"
            }
            {
                name: "keyword.operator.static.pine"
                match: "(?x)(\\:|\\.\\.\\.|\\.|\\?)"
            }
        ]
    "constant":
        patterns: [
            {
                name: "constant.language.pine"
                match: "\\b(true|false|null)\\b"
            }
            {
                name: "constant.numeric.octal.pine"
                match: "\\b(0o[0-9]*)"
            }
            {
                name: "constant.numeric.hex.pine"
                match: "\\b(0x[0-9]*)"
            }
            {
                name: "constant.numeric.binary.pine"
                match: "\\b(0b[0-9]*)"
            }
            {
                name: "constant.numeric.real.pine"
                match: "([0-9]*\\.?[0-9]+)"
            }
        ]
    "string":
        patterns: [
            {
                name: "string.quoted.pine"
                begin: "\\\""
                end: "\\\""
            }
        ]
    "variable":
        patterns: [
            {
                name: "variable.pine"
                match: "[A-Za-z_][a-zA-Z0-9_]*"
            }
        ]
